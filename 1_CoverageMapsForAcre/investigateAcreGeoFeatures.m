% INVESTIGATEACREGEOFEATURES Visualize geographical features of interest
% for ACRE.
%
% Yaguang Zhang, Purdue, 03/16/2022

clearvars -except PRESETS CARRIER_FREQUENCIES_IN_MHZ ...
    PRESET CARRIER_FREQUENCY_IN_MHZ pathToSaveSimManDiary idxFre;
clc; close all; dbstop if error;

% Locate the Matlab workspace and save the current filename.
cd(fileparts(mfilename('fullpath'))); cd('..'); addpath('lib');
curFileName = mfilename;

prepareSimulationEnv;

% The absolute path to the folder for saving the results.
pathToSaveResults = fullfile(pwd, '..', ...
    'PostProcessingResults', 'AcreGeoFeatureInvestigation');
if ~exist(pathToSaveResults, 'dir')
    mkdir(pathToSaveResults)
end

% We will load cached results for faster processing if available.
dirToCachedResults = fullfile(pathToSaveResults, 'cachedResults.mat');
if exist(dirToCachedResults, 'file')
    disp(' ')
    disp(['[', datestr(now, datetimeFormat), ...
        '] Loading cached geo info for ACRE ...'])

    load(dirToCachedResults);
else
    %% Load Boundary
    disp(' ')
    disp(['[', datestr(now, datetimeFormat), ...
        '] Extracting geo info for ACRE ...'])

    absDirToAcreKmz = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
        'Lidar', 'ACRE', 'AcreExactBoundaryRaw', 'ACRE.kmz');
    absDirToAcreNewKmz = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
        'Lidar', 'ACRE', 'AcreExactBoundary_2022', 'ACRE.kmz');

    % Boundary of ACRE.
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Loading outlines of ACRE fields ...'])
    [UTM_X_Y_BOUNDARY_ACRE, UTM_ZONE_ACRE] ...
        = extractBoundaryFromKmzFile(absDirToAcreKmz);
    % We will use the latest boundaries for separate fields.
    [UTM_X_Y_BOUNDARY_ACRE_NEW, UTM_ZONE_ACRE_NEW, acreKmzStruct, ...
        utmXYAcrePolygons, lonLatAcrePolygons] ...
        = extractBoundaryFromKmzFile(absDirToAcreNewKmz);

    % We will use the union of both the old and new boundaries as the ACRE
    % outline.
    utmXYBoundaryAcrePoly = union(polyshape(UTM_X_Y_BOUNDARY_ACRE), ...
        polyshape(UTM_X_Y_BOUNDARY_ACRE_NEW));
    % Remove holes.
    utmXYBoundaryAcrePoly = rmholes(utmXYBoundaryAcrePoly);

    UTM_X_Y_BOUNDARY_ACRE = utmXYBoundaryAcrePoly.Vertices;
    % Close the boundary.
    UTM_X_Y_BOUNDARY_ACRE(end+1, :) = UTM_X_Y_BOUNDARY_ACRE(1, :);

    % For GPS and UTM conversions.
    [deg2utm_speZone, utm2deg_speZone] ...
        = genUtmConvertersForFixedZone(UTM_ZONE_ACRE);

    UTM_LAT_LON_BOUNDARY_ACRE = nan(size(UTM_X_Y_BOUNDARY_ACRE));
    [UTM_LAT_LON_BOUNDARY_ACRE(:,1), UTM_LAT_LON_BOUNDARY_ACRE(:,2)] ...
        = utm2deg_speZone(UTM_X_Y_BOUNDARY_ACRE(:,1), ...
        UTM_X_Y_BOUNDARY_ACRE(:,2));

    %% Soil Map

    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Fetching the soil map ...'])
    % Note that we have data covering a larger area than ACRE. Soil
    % polygons are stored in the soilmu_a_aoi shape files.
    absDirToSoilShape = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
        'Soil', 'ACRE', 'wss_aoi_2022-03-21_08-23-50', 'spatial', ...
        'soilmu_a_aoi');
    soilShape = shaperead(absDirToSoilShape);
    soilLonLatPolyshapes = arrayfun(@(S) polyshape(S.X, S.Y), soilShape);
    % Intersect the soil polyshapes with the ACRE boundary to discard
    % content out of the area of interest.
    acreBoundLonLatPolyshape = polyshape( ...
        UTM_LAT_LON_BOUNDARY_ACRE(:,2), UTM_LAT_LON_BOUNDARY_ACRE(:,1));
    soilLonLatPolyshapesAcre = arrayfun( ...
        @(S) intersect(S, acreBoundLonLatPolyshape), ...
        soilLonLatPolyshapes);
    % Remove empty polyshapes.
    soilLonLatPolyshapesAcre = soilLonLatPolyshapesAcre( ...
        arrayfun(@(s) ~isempty(s.Vertices), soilLonLatPolyshapesAcre));

    %% Create a Grid

    % Corresponds to the 5 feet resolution of the LiDAR DSM.
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Creating a grid ...'])
    gridResolutionInM = 1.5;
    gridUtmXYPts = buildSimGrid(UTM_X_Y_BOUNDARY_ACRE, ...
        gridResolutionInM, true);

    %% LiDAR Data Info
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Loading Indiana LiDAR meta data ...'])

    dirToLidarFiles = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
        'Lidar_2019', 'IN', 'DSM');

    % Preprocess .img/.tif LiDAR data. To make Matlab R2019b work, we need
    % to remove preprocessIndianaLidarDataSet from path after things are
    % done.
    addpath(fullfile(pwd, 'lib', 'lidar'));
    [lidarFileRelDirs, lidarFileXYCoveragePolyshapes, ~] ...
        = preprocessIndianaLidarDataSetDsm(dirToLidarFiles, ...
        deg2utm_speZone, utm2deg_speZone);
    rmpath(fullfile(pwd, 'lib', 'lidar'));
    lidarFileAbsDirs = cellfun(@(d) ...
        [dirToLidarFiles, strrep(d, '\', filesep)], ...
        lidarFileRelDirs, 'UniformOutput', false);

    % Extra information on the LiDAR data set.
    %   - Overall boundries for the area covered by the LiDAR data set in
    %   UTM.
    % lidarFilesXYCoveragePolyshape ...
    %     = mergePolygonsForAreaOfInterest(lidarFileXYCoveragePolyshapes,
    %     1);
    %   - Centroids for the LiDAR files in UTM.
    lidarFileXYCentroids ...
        = extractCentroidsFrom2DPolyCell(lidarFileXYCoveragePolyshapes);
    %   - The .mat copies for the LiDAR data. For the 2019 dataset, they
    %   are stored in a cache folder.
    lidarMatFileAbsDirs = lidarFileAbsDirs;
    for idxMatF = 1:length(lidarMatFileAbsDirs)
        [lidarMatFPath, lidarMatFName, ~] ...
            = fileparts(lidarMatFileAbsDirs{idxMatF});
        lidarMatFileAbsDirs{idxMatF} = fullfile(lidarMatFPath, '..', ...
            'MatlabCache', [lidarMatFName, '.mat']);
    end

    %% Fetch LiDAR Data
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Interpolating elevation and LiDAR data for the grid pts ...'])

    [terrainEles, lidarZs, curEleForNanPts] ...
        = generateProfileSamps( ...
        gridUtmXYPts, utm2deg_speZone, ...
        lidarFileXYCentroids, lidarFileXYCoveragePolyshapes, ...
        lidarMatFileAbsDirs, 'both');

    %% Ground Elevation Gradient

    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Computing ground elevation gradient ...'])
    % Create a low-resolution rectangle grid covering a little more area
    % than ACRE.
    extraDistInMToCover = 100;
    numOfPtsAlongLongSide = 50;

    minX = min(UTM_X_Y_BOUNDARY_ACRE(:,1)) - extraDistInMToCover/2;
    maxX = max(UTM_X_Y_BOUNDARY_ACRE(:,1)) + extraDistInMToCover/2;
    minY = min(UTM_X_Y_BOUNDARY_ACRE(:,2)) - extraDistInMToCover/2;
    maxY = max(UTM_X_Y_BOUNDARY_ACRE(:,2)) + extraDistInMToCover/2;
    lowResGridUtmXYBound = [minX, minY; minX, maxY;
        maxX, maxY; maxX, minY; minX, minY];

    [lowResGridUtmXYPts, lowResInM] = buildSimGrid( ...
        lowResGridUtmXYBound, numOfPtsAlongLongSide);

    % Fetch ground elevation for the low-resolution grid.
    lowResGridTerrainEles = generateProfileSamps( ...
        lowResGridUtmXYPts, utm2deg_speZone, ...
        lidarFileXYCentroids, lidarFileXYCoveragePolyshapes, ...
        lidarMatFileAbsDirs, 'elevation');

    % Reshape the results to matrices.
    lowResGridUtmXMat = reshape(lowResGridUtmXYPts(:, 1), ...
        numOfPtsAlongLongSide, []);
    lowResGridUtmYMat = reshape(lowResGridUtmXYPts(:, 2), ...
        numOfPtsAlongLongSide, []);
    lowResGridTerrainEleMat = reshape(lowResGridTerrainEles, ...
        numOfPtsAlongLongSide, []);

    % Compute gradient.
    [lowResGridDeltaEleXs, lowResGridDeltaEleYs] ...
        = gradient(lowResGridTerrainEleMat);

    % Repeat the process for a high-resolution rectangle grid covering a
    % little more area than ACRE.
    numOfPtsAlongLongSide = 1000;
    [highResGridUtmXYPts, highResInM] = buildSimGrid( ...
        lowResGridUtmXYBound, numOfPtsAlongLongSide);
    highResGridTerrainEles = generateProfileSamps( ...
        highResGridUtmXYPts, utm2deg_speZone, ...
        lidarFileXYCentroids, lidarFileXYCoveragePolyshapes, ...
        lidarMatFileAbsDirs, 'elevation');
    highResGridUtmXMat = reshape(highResGridUtmXYPts(:, 1), ...
        numOfPtsAlongLongSide, []);
    highResGridUtmYMat = reshape(highResGridUtmXYPts(:, 2), ...
        numOfPtsAlongLongSide, []);
    highResGridTerrainEleMat = reshape(highResGridTerrainEles, ...
        numOfPtsAlongLongSide, []);
    [highResGridDeltaEleXs, highResGridDeltaEleYs] ...
        = gradient(highResGridTerrainEleMat);

    %% Fetch Cell Towers
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Fetching tower locations ...'])

    % Default to the NTIA+HIFLD cell tower locations.
    ABS_PATH_TO_CELL_ANTENNAS_CSV = fullfile( ...
        ABS_PATH_TO_SHARED_FOLDER, ...
        'CellTowerInfo', 'NtiaLayoutPlusHifldCellTs', ...
        'NtiaLayoutMergedWithHifldCellTs_Threshold_1000m_LatLonH.csv');

    % Note: we use "height" to indicate the vertical distance from the
    % ground to the antenna; "elevation" to indicate the ground elevation;
    % and "altitude" to indicate elevation+height.
    cellAntsLatLonH = csvread( ...
        ABS_PATH_TO_CELL_ANTENNAS_CSV, 1, 1); %#ok<CSVRD>

    %% Cache the Results
    disp(' ')
    disp(['    [', datestr(now, datetimeFormat), ...
        '] Caching results ...'])

    save(dirToCachedResults, ...
        ... ACRE field boudnaries:
        'UTM_X_Y_BOUNDARY_ACRE', 'UTM_ZONE_ACRE', ...
        'UTM_LAT_LON_BOUNDARY_ACRE', 'acreKmzStruct', ...
        'utmXYAcrePolygons', 'lonLatAcrePolygons', ...
        ... ACRE soil polygons
        'soilLonLatPolyshapesAcre', ...
        ... Grid point locs:
        'gridResolutionInM', 'gridUtmXYPts', ...
        ... Ground elevation and LiDAR z values.
        'terrainEles', 'lidarZs', ...
        ... Ground elevation gradient over a low-resolution rectangle grid.
        'lowResInM', 'lowResGridUtmXMat', 'lowResGridUtmYMat', ...
        'lowResGridTerrainEleMat', ...
        'lowResGridDeltaEleXs', 'lowResGridDeltaEleYs', ...
        ... Ground elevation gradient over a high-resolution rectangle grid.
        'highResInM', 'highResGridUtmXMat', 'highResGridUtmYMat', ...
        'highResGridTerrainEleMat', ...
        'highResGridDeltaEleXs', 'highResGridDeltaEleYs', ...
        ... Cell tower locations.
        'cellAntsLatLonH');
end

if ~exist('deg2utm_speZone', 'var')
    % For GPS and UTM conversions.
    [deg2utm_speZone, utm2deg_speZone] ...
        = genUtmConvertersForFixedZone(UTM_ZONE_ACRE);
end

gridLatLonPts = nan(size(gridUtmXYPts));
[gridLatLonPts(:,1), gridLatLonPts(:,2)] ...
    = utm2deg_speZone(gridUtmXYPts(:,1), gridUtmXYPts(:,2));

[lowResGridUtmLatMat, lowResGridUtmLonMat] ...
    = utm2deg_speZone(lowResGridUtmXMat, lowResGridUtmYMat);
[highResGridLatMat, highResGridLonMat] ...
    = utm2deg_speZone(highResGridUtmXMat, highResGridUtmYMat);

% For easier gradient visualization (i) in ACRE and (ii) in 3D.
boolsLowResGridPtsInAcre = InPolygon( ...
    lowResGridUtmXMat(:), lowResGridUtmYMat(:), ...
    UTM_X_Y_BOUNDARY_ACRE(:,1), UTM_X_Y_BOUNDARY_ACRE(:,2));

boolsHighResGridPtsInAcre = InPolygon( ...
    highResGridUtmXMat(:), highResGridUtmYMat(:), ...
    UTM_X_Y_BOUNDARY_ACRE(:,1), UTM_X_Y_BOUNDARY_ACRE(:,2));
highResGridDeltaEleAbsVs = (highResGridDeltaEleXs.^2 ...
    + highResGridDeltaEleYs.^2).^0.5./highResInM;

% Merge the soil polygons into one for simplicity.
soilLonLatMergedBoundAcre = soilLonLatPolyshapesAcre(1).Vertices;
for idxSP = 2:length(soilLonLatPolyshapesAcre)
    soilLonLatMergedBoundAcre = [ ...
        soilLonLatMergedBoundAcre; ...
        nan nan; soilLonLatPolyshapesAcre(idxSP).Vertices]; %#ok<AGROW>
end

disp(' ')
disp(['[', datestr(now, datetimeFormat), ...
    '] Done!'])

%% Plots

disp(' ')
disp(['[', datestr(now, datetimeFormat), ...
    '] Generating figures for ground elevation and LiDAR z values ...'])

figureSize = [500, 500];
% Use the same color for the same height so that figures can be compared.
commonCaxisRange = [205, 400];

% For reusing path loss map plot functions.
extensionFactor= 0.2;
simConfigs.deg2utm_speZone = deg2utm_speZone;
simConfigs.utm2deg_speZone = utm2deg_speZone;

simConfigs.UTM_X_Y_BOUNDARY_OF_INTEREST = UTM_X_Y_BOUNDARY_ACRE;
simConfigs.NUM_OF_PIXELS_FOR_LONGER_SIDE = 100;
simConfigs.CURRENT_SIMULATION_TAG = 'AcreGeo';
simConfigs.ALLOWED_PATH_LOSS_RANGE_IN_DB = [-inf, inf];

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation point cloud ...'])

figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([gridLatLonPts(:, [2,1]), terrainEles], ...
    'Labels', {'', '', '', '', ...
    'Ground Elevation (m)            '});
xticks([]); yticks([]); view(2); zlim([0, max(terrainEles)]);
[axisToSet, weightForWidth] ...
    = extendLonLatAxisByFactor( ...
    [min(gridLatLonPts(:,2)), max(gridLatLonPts(:,2)), ...
    min(gridLatLonPts(:,1)), max(gridLatLonPts(:,1))], ...
    extensionFactor, simConfigs);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, '1_GroundEle_GridPts.jpg'), '-m3');

figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([gridLatLonPts(:, [2,1]), terrainEles], ...
    'Labels', {'', '', '', '', ...
    'Ground Elevation (m)            '}, 'ColorRange', commonCaxisRange);
xticks([]); yticks([]); view(2); zlim([0, max(terrainEles)]);
[axisToSet, weightForWidth] ...
    = extendLonLatAxisByFactor( ...
    [min(gridLatLonPts(:,2)), max(gridLatLonPts(:,2)), ...
    min(gridLatLonPts(:,1)), max(gridLatLonPts(:,1))], ...
    extensionFactor, simConfigs);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '1_GroundEle_GridPts_FixedColorBar.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] LiDAR z point cloud ...'])

% Need to remove the -inf values for water before plotting.
lidarZsToPlot = lidarZs;
lidarZsToPlot(isinf(lidarZs)) = nan;

figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([gridLatLonPts(:, [2,1]), lidarZsToPlot], ...
    'Labels', {'', '', '', '', ...
    'LiDAR z (m)'});
xticks([]); yticks([]); view(2); zlim([0, max(lidarZsToPlot)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, '1_LiDARZ_DSM_GridPts.jpg'), '-m3');

figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([gridLatLonPts(:, [2,1]), lidarZsToPlot], ...
    'Labels', {'', '', '', '', ...
    'LiDAR z (m)'}, 'ColorRange', commonCaxisRange);
xticks([]); yticks([]); view(2); zlim([0, max(lidarZsToPlot)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '1_LiDARZ_DSM_GridPts_FixedColorBar.jpg'), '-m3');
refAxis = axis;

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] LiDAR z point - ground elevation cloud ...'])

lidarZMinusEle = lidarZsToPlot-terrainEles;

figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([gridLatLonPts(:, [2,1]), lidarZMinusEle], ...
    'Labels', {'', '', '', '', ...
    'LiDAR z - Ground Elevation (m)                            '});
xticks([]); yticks([]); view(2); zlim([0, max(lidarZMinusEle)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
axis(refAxis);
export_fig(fullfile(pathToSaveResults, ...
    '1_LiDARZMinusEle_GridPts.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation contour plot ...'])

plotPathLossMap( ...
    [gridLatLonPts(:, [2,1]), terrainEles], [], simConfigs);
hCb = findall(gcf,'type','ColorBar');
title(hCb, 'Ground Elevation (m)            ');
set(gcf, 'Position', [0, 0, figureSize]);
xlabel(''); ylabel(''); caxis([min(terrainEles), max(terrainEles)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, '2_GroundEle_Contour.jpg'), '-m3');
caxis(commonCaxisRange);
export_fig(fullfile(pathToSaveResults, ...
    '2_GroundEle_Contour_FixedColorBar.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] LiDAR z contour plot ...'])

plotPathLossMap( ...
    [gridLatLonPts(:, [2,1]), lidarZsToPlot], [], simConfigs);
hCb = findall(gcf,'type','ColorBar');
title(hCb, 'LiDAR z (m)');
set(gcf, 'Position', [0, 0, figureSize]);
xlabel(''); ylabel(''); caxis([min(lidarZsToPlot), max(lidarZsToPlot)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, '2_LiDARZ_DSM_Contour.jpg'), '-m3');
caxis(commonCaxisRange);
export_fig(fullfile(pathToSaveResults, ...
    '2_LiDARZ_DSM_Contour_FixedColorBar.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] LiDAR z point - ground elevation contour plot ...'])

plotPathLossMap( ...
    [gridLatLonPts(:, [2,1]), lidarZMinusEle], [], simConfigs);
hCb = findall(gcf,'type','ColorBar');
title(hCb, ...
    'LiDAR z - Ground Elevation (m)                                 ');
set(gcf, 'Position', [0, 0, figureSize]);
xlabel(''); ylabel(''); caxis([min(lidarZMinusEle), max(lidarZMinusEle)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
hGM = plot_google_map('MapType', 'satellite'); delete(hGM);
export_fig(fullfile(pathToSaveResults, ...
    '2_LiDARZMinusEle_Contour.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Overview of soil polygons ...'])

figure; plot(soilLonLatPolyshapesAcre);
title('Soil Polygons');
set(gcf, 'Position', [0, 0, figureSize]);
xlabel(''); ylabel(''); xticklabels(''); yticklabels('');
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '0_SoilPolygons.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation histograms ...'])
numsOfBins = [3:7, 30, 50, 100];
for idxNoB = 1:length(numsOfBins)
    numOfBins = numsOfBins(idxNoB); figure;
    histogram(terrainEles, numOfBins, 'Normalization', 'probability');
    xlabel('Ground Elevation (m)');
    ylabel(['Relative Frequency (', num2str(numOfBins), ' Bins)']);
    grid on; grid minor;
    export_fig(fullfile(pathToSaveResults, ...
        ['3_GroundEle_Histogram_NumOfBins_', num2str(numOfBins), ...
        '.jpg']), '-m3');
end

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] LiDAR z histograms ...'])
for idxNoB = 1:length(numsOfBins)
    numOfBins = numsOfBins(idxNoB); figure;
    histogram(lidarZsToPlot, numOfBins, 'Normalization', 'probability');
    xlabel('LiDAR z (m)');
    ylabel(['Relative Frequency (', num2str(numOfBins), ' Bins)']);
    grid on; grid minor;
    export_fig(fullfile(pathToSaveResults, ...
        ['3_LiDARZ_DSM_Histogram_NumOfBins_', num2str(numOfBins), ...
        '.jpg']), '-m3');
end

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation gradient histograms ...'])
for idxNoB = 1:length(numsOfBins)
    numOfBins = numsOfBins(idxNoB); figure;
    histogram(highResGridTerrainEleMat(boolsHighResGridPtsInAcre), ...
        numOfBins, 'Normalization', 'probability');
    xlabel('Ground Elevation Gradient Magnitude'); xticklabels('');
    ylabel(['Relative Frequency (', num2str(numOfBins), ' Bins)']);
    grid on; grid minor;
    export_fig(fullfile(pathToSaveResults, ...
        ['3_EleGradientMag_Histogram_NumOfBins_', num2str(numOfBins), ...
        '.jpg']), '-m3');
end

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation: group maps ...'])
numsOfGroups = numsOfBins;
for idxNoG = 1:length(numsOfGroups)
    numOfGroups = numsOfGroups(idxNoG);

    % Note: The value X(i) is in the kth bin if edges(k) ≤ X(i) <
    % edges(k+1). The last bin also includes the right bin edge, so that it
    % contains X(i) if edges(end-1) ≤ X(i) ≤ edges(end).
    [~, edges] = histcounts(terrainEles, numOfGroups);

    numOfEdges = length(edges);
    assert(numOfEdges-1==numOfGroups, ...
        'Number of edges does not match with number of groups!');

    terrainElesToShow = terrainEles;
    for idxOfG = 1:numOfGroups
        startValue = edges(idxOfG);
        endValue = edges(idxOfG+1);
        centerValue = mean([startValue, endValue]);
        terrainElesToShow((terrainEles>=startValue) ...
            & (terrainEles<endValue)) = centerValue;
    end
    % The elevation values which equal to the last edge value need to be
    % moved to the last bin center.
    terrainElesToShow(terrainEles==edges(end)) = centerValue;

    figure('Position', [0, 0, figureSize], ...
        'PaperPositionMode', 'auto'); colormap turbo;
    plot3k([gridLatLonPts(:, [2,1]), terrainElesToShow], ...
        'ColorBar', false);
    xticks([]); yticks([]); view(2); zlim([0, max(terrainEles)]);
    title([num2str(numOfGroups), ' Groups']);
    adjustFigSizeByContent(gcf, axisToSet, ...
        'height', weightForWidth*1.05);
    plot_google_map('MapType', 'satellite');
    export_fig(fullfile(pathToSaveResults, ...
        ['4_GroundEle_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '.jpg']), '-m3');

    % Overlay soil polygon outlines.
    hold on; hSoilOutlines = plot3( ...
        soilLonLatMergedBoundAcre(:,1), soilLonLatMergedBoundAcre(:,2), ...
        ones(size(soilLonLatMergedBoundAcre(:,1))) ...
        .*max(terrainElesToShow)+1, 'w-');
    legend(hSoilOutlines, 'Soil Map', 'Location', 'ne');
    transparentizeCurLegends;
    export_fig(fullfile(pathToSaveResults, ...
        ['4_GroundEle_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '_WithSoil.jpg']), '-m3');

    % Overlay ground elevation gradient.
    hQuiver = quiver3(lowResGridUtmLonMat(boolsLowResGridPtsInAcre), ...
        lowResGridUtmLatMat(boolsLowResGridPtsInAcre), ...
        ones(size(lowResGridUtmLonMat(boolsLowResGridPtsInAcre))) ...
        .*max(terrainElesToShow)+2,...
        -lowResGridDeltaEleXs(boolsLowResGridPtsInAcre), ...
        -lowResGridDeltaEleYs(boolsLowResGridPtsInAcre), ...
        zeros(size(lowResGridUtmLonMat(boolsLowResGridPtsInAcre))), 'b');
    legend([hSoilOutlines, hQuiver], 'Soil Map', 'Negative Gradient', ...
        'Location', 'ne');
    transparentizeCurLegends;
    export_fig(fullfile(pathToSaveResults, ...
        ['4_GroundEle_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '_WithSoilAndEleNegGradient.jpg']), '-m3');
end

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Overview of cell tower locations ...'])
figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); hold on;
hAcre = plot(lonLatAcrePolygons);
xticks([]); yticks([]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
axis manual;
hTowers = plot(cellAntsLatLonH(:,2), cellAntsLatLonH(:,1), ...
    'vr', 'LineWidth', 2);
legend(hTowers, 'Cell Towers');
export_fig(fullfile(pathToSaveResults, ...
    '5_Overview_CellTowers.jpg'), '-m3');

[axisToSetZoomedOut, weightForWidthZoomedOut] ...
    = extendLonLatAxisByFactor( ...
    [min(gridLatLonPts(:,2)), max(gridLatLonPts(:,2)), ...
    min(gridLatLonPts(:,1)), max(gridLatLonPts(:,1))], ...
    extensionFactor*30, simConfigs);
adjustFigSizeByContent(gcf, axisToSetZoomedOut, ...
    'height', weightForWidthZoomedOut*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '5_Overview_CellTowers_ZoomedOut.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Overview of ground elevation: negative gradient ...'])

figure; hold on;
plot(lonLatAcrePolygons);
hQuiver = quiver(lowResGridUtmLonMat(boolsLowResGridPtsInAcre), ...
    lowResGridUtmLatMat(boolsLowResGridPtsInAcre), ...
    -lowResGridDeltaEleXs(boolsLowResGridPtsInAcre), ...
    -lowResGridDeltaEleYs(boolsLowResGridPtsInAcre), 'w');
title('Ground Elevation: Negative Gradient');
set(gcf, 'Position', [0, 0, figureSize]);
xlabel(''); ylabel(''); xticklabels(''); yticklabels('');
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
hGM = plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '6_NegGroundElevationGradient.jpg'), '-m3');

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation gradient magnitude: group maps ...'])
numsOfGroups = numsOfBins;
terrainEleGraMags = highResGridDeltaEleAbsVs(boolsHighResGridPtsInAcre);
for idxNoG = 1:length(numsOfGroups)
    numOfGroups = numsOfGroups(idxNoG);

    % Note: The value X(i) is in the kth bin if edges(k) ≤ X(i) <
    % edges(k+1). The last bin also includes the right bin edge, so that it
    % contains X(i) if edges(end-1) ≤ X(i) ≤ edges(end).
    [~, edges] = histcounts(terrainEleGraMags, numOfGroups);

    numOfEdges = length(edges);
    assert(numOfEdges-1==numOfGroups, ...
        'Number of edges does not match with number of groups!');

    eleGraMagsToShow = terrainEleGraMags;
    for idxOfG = 1:numOfGroups
        startValue = edges(idxOfG);
        endValue = edges(idxOfG+1);
        centerValue = mean([startValue, endValue]);
        eleGraMagsToShow((terrainEleGraMags>=startValue) ...
            & (terrainEleGraMags<endValue)) = centerValue;
    end
    % The elevation values which equal to the last edge value need to be
    % moved to the last bin center.
    eleGraMagsToShow(terrainEleGraMags==edges(end)) = centerValue;

    figure('Position', [0, 0, figureSize], ...
        'PaperPositionMode', 'auto'); colormap turbo;
    plot3k([highResGridLonMat(boolsHighResGridPtsInAcre), ...
        highResGridLatMat(boolsHighResGridPtsInAcre), ...
        eleGraMagsToShow], 'ColorBar', false);
    xticks([]); yticks([]); view(2); zlim([0, max(terrainEleGraMags)]);
    title([num2str(numOfGroups), ' Groups']);
    adjustFigSizeByContent(gcf, axisToSet, ...
        'height', weightForWidth*1.05);
    plot_google_map('MapType', 'satellite');
    export_fig(fullfile(pathToSaveResults, ...
        ['7_EleGradientMag_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '.jpg']), '-m3');

    % Overlay soil polygon outlines.
    hold on; hSoilOutlines = plot3( ...
        soilLonLatMergedBoundAcre(:,1), soilLonLatMergedBoundAcre(:,2), ...
        ones(size(soilLonLatMergedBoundAcre(:,1))) ...
        .*max(eleGraMagsToShow)+1, 'w-');
    legend(hSoilOutlines, 'Soil Map', 'Location', 'ne');
    transparentizeCurLegends;
    export_fig(fullfile(pathToSaveResults, ...
        ['7_EleGradientMag_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '_WithSoil.jpg']), '-m3');

    % Overlay ground elevation gradient.
    hQuiver = quiver3(lowResGridUtmLonMat(boolsLowResGridPtsInAcre), ...
        lowResGridUtmLatMat(boolsLowResGridPtsInAcre), ...
        ones(size(lowResGridUtmLonMat(boolsLowResGridPtsInAcre))) ...
        .*max(eleGraMagsToShow)+2,...
        -lowResGridDeltaEleXs(boolsLowResGridPtsInAcre), ...
        -lowResGridDeltaEleYs(boolsLowResGridPtsInAcre), ...
        zeros(size(lowResGridUtmLonMat(boolsLowResGridPtsInAcre))), 'b');
    legend([hSoilOutlines, hQuiver], 'Soil Map', 'Negative Gradient', ...
        'Location', 'ne');
    transparentizeCurLegends;
    export_fig(fullfile(pathToSaveResults, ...
        ['7_EleGradientMag_Grouped_NumOfGroups_', num2str(numOfGroups), ...
        '_WithSoilAndEleNegGradient.jpg']), '-m3');
end

disp(' ')
disp(['    [', datestr(now, datetimeFormat), ...
    '] Ground elevation gradient magnitude: overview ...'])
eleMatsToPlot = highResGridDeltaEleAbsVs(boolsHighResGridPtsInAcre);
figure('Position', [0, 0, figureSize], ...
    'PaperPositionMode', 'auto'); colormap turbo;
plot3k([highResGridLonMat(boolsHighResGridPtsInAcre), ...
    highResGridLatMat(boolsHighResGridPtsInAcre), eleMatsToPlot], ...
    'ColorRange', [0, max(eleMatsToPlot)]);
title('Ground Elevation Gradient Magnitude');
xticks([]); yticks([]); view(2); zlim([0, max(eleMatsToPlot)]);
adjustFigSizeByContent(gcf, axisToSet, ...
    'height', weightForWidth*1.05);
plot_google_map('MapType', 'satellite');
export_fig(fullfile(pathToSaveResults, ...
    '1_EleGradientMag_HighRes_GridPts.jpg'), '-m3');

disp(' ')
disp(['[', datestr(now, datetimeFormat), ...
    '] Done!'])

% EOF