%TESTFCCSPEEDTESTAPPRESULTS A script to read in and visualize results from
%the FCC speed test app.
%
% Yaguang Zhang, Purdue, 10/14/2021

clear; clc; close all; dbstop if error;

% Locate the Matlab workspace and save the current filename.
cd(fileparts(mfilename('fullpath'))); cd('..');
addpath('lib'); addpath('.');
curFileName = mfilename;

prepareSimulationEnv;

%% Script Parameters

% The absolute path to the folder with the FCC speed test app results.
%   - FCC_SpeedTest_Anderson_20211007
%     Four tests from Prof. Anderson.
%   - FCC_SpeedTest_Yaguang_20211014
%     Two tests from Yaguang.
%   - FCC_SpeedTest_Anderson_20211014
%     Raw .zip files from four students.
%   - FCC_SpeedTest_LongmontCampaign_20211105
%     Copies of the Longmont measurement campaign results.
PRESET = 'FCC_SpeedTest_LongmontCampaign_20211105';
pathToFccSpeedTestAppResults = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
    'FCC Rural Broadband', PRESET);

% The absolute path to save results.
pathToSaveResults = fullfile(ABS_PATH_TO_SHARED_FOLDER, ...
    'PostProcessingResults', '9_SimulationsForCO', ...
    'FccSpeedTestAppTests', PRESET);
% Create directories if necessary.
if ~exist(pathToSaveResults, 'dir')
    mkdir(pathToSaveResults);
end

%% Read All the Data

logsJson = rdir(fullfile(pathToFccSpeedTestAppResults, '**', '*.json'));
logsZip = rdir(fullfile(pathToFccSpeedTestAppResults, '**', '*.zip'));
if isempty(logsJson) || ...
        ((~isempty(logsJson)) && (length(logsJson)<length(logsZip)))
    % Unzip the raw .zip files first.
    for idxLogZip = 1:length(logsZip)
        unzip(logsZip(idxLogZip).name, logsZip(idxLogZip).name(1:(end-4)));
    end

    % We need to get rid of the logs under the __MACOSX folders.
    invalidLogs = rdir(fullfile(pathToFccSpeedTestAppResults, ...
        '**', '__MACOSX', '**', '*.json'));
    for idxInvalidLog = 1:length(invalidLogs)
        delete(invalidLogs(idxInvalidLog).name);
    end

    % Reload the files.
    logsJson = rdir(fullfile(pathToFccSpeedTestAppResults, '**', '*.json'));

    % This check does not always apply. For example, when the app exports
    % multiple tests in one attemp.
    %
    % logsZip = rdir(fullfile(pathToFccSpeedTestAppResults, ...
    %     '**', '*.zip'));
    %
    % assert(length(logsJson)==length(logsZip), ...
    %     ['Error! The number of raw .zip files (', ...
    %      num2str(length(logsZip)), ...
    %     ') does not agree with the number of JSON files (', ...
    %      num2str(length(logsJson)), ')!']);
end
assert(~isempty(logsJson), 'Error! No JSON log files found!')

logsStructAndroid = struct('version', {}, ...
    'carrier_name', {}, 'iso_country_code', {}, 'manufacturer', {}, ...
    'mobile_country_code', {}, 'mobile_network_code', {}, 'model', {}, ...
    'operating_system_version', {}, 'tests', {}, 'submission_type', {});
logsStructIos = struct('device_environment', {}, ...
    'tests', {}, 'metadata', {});
numOfLogs = length(logsJson);
for idxLog = 1:numOfLogs
    % Read files as text.
    logStr = fileread(logsJson(idxLog).name);
    % Examine the JSON object and adjust the structure if necessary.
    logNew = jsondecode(logStr);
    try
        logsStructAndroid(end+1) = logNew; %#ok<SAGROW>
        assert(strcmp(logNew.operating_system_version(1:7), 'Android'), ...
            'Error! Input log is generated by ', ...
            logNew.operating_system_version, ' instead of Android!')
    catch
        logsStructIos(end+1) = logNew; %#ok<SAGROW>
        osVersion = logNew.device_environment.operating_system_version;
        assert(strcmp(osVersion(1:3), 'iOS'), ...
            'Error! Input log is generated by ', osVersion, ...
            ' instead of iSO!')
    end
end

%% Extract the Information of Interest

[osVersions, carriers] = deal(cell(numOfLogs, 1));
[downSpeedsBps, upSpeedsBps] = deal(nan(numOfLogs, 1));
[downEndLatLons, upEndLatLons] = deal(nan(numOfLogs, 2));
flagsIsCell = false(numOfLogs, 1);

numOfAndroidLogs = length(logsStructAndroid);
% indicesIgnoredLog = [];
for idxLog = 1:numOfLogs
    try
        if idxLog<=numOfAndroidLogs
            [osVersions{idxLog}, carriers{idxLog}, ...
                downSpeedsBps(idxLog), upSpeedsBps(idxLog), ...
                downEndLatLons(idxLog, :), upEndLatLons(idxLog, :), ...
                flagsIsCell(idxLog)] ...
                = parseFccSpeedTestAppLog(logsStructAndroid(idxLog));
        else
            [osVersions{idxLog}, carriers{idxLog}, ...
                downSpeedsBps(idxLog), upSpeedsBps(idxLog), ...
                downEndLatLons(idxLog, :), upEndLatLons(idxLog, :), ...
                flagsIsCell(idxLog)] ...
                = parseFccSpeedTestAppLog(logsStructIos(...
                idxLog-numOfAndroidLogs));

        end
    catch err
        % indicesIgnoredLog(end+1) = idxLog; %#ok<SAGROW>
        warning(['Ignoring invalid log: ', logsJson(idxLog).name]);
        disp(err);
    end
end

% Remove invalid cellular speed test results.

% indicesLogsWithUnknownOs = find(cellfun(@isempty, osVersions))';
%  for idxLogWithUnkownOs = indicesLogsWithUnknownOs
%     osVersions{idxLogWithUnkownOs} = 'Unkown';
%  end

osVersions(~flagsIsCell) = [];
carriers(~flagsIsCell) = [];
downSpeedsBps(~flagsIsCell) = [];
upSpeedsBps(~flagsIsCell) = [];
downEndLatLons(~flagsIsCell, :) = [];
upEndLatLons(~flagsIsCell, :) = [];

%% Plots

% DOWN/up speed on map.
hDownSpeed = figure; hold on;
plot3k([downEndLatLons(:, [2, 1]), downSpeedsBps./(10^6)], ...
    'Labels', {'Download Speed on Map', '', '', '', ...
    'Data Rate (Mbps)'}, ...
    'Plottype','stem', 'Marker', {'.', 12});
xticklabels([]); yticklabels([]); view(3);
plot_google_map('MapType', 'Hybrid');

saveas(hDownSpeed, ...
    fullfile(pathToSaveResults, 'downloadSpeed_3D.jpg'));
view(2);
saveas(hDownSpeed, ...
    fullfile(pathToSaveResults, 'downloadSpeed_2D.jpg'));

hUpSpeed = figure; hold on;
plot3k([downEndLatLons(:, [2, 1]), upSpeedsBps./(10^6)], ...
    'Labels', {'Upload Speed on Map', '', '', '', ...
    'Data Rate (Mbps)'}, ...
    'Plottype','stem', 'Marker', {'.', 12});
xticklabels([]); yticklabels([]); view(3);
plot_google_map('MapType', 'Hybrid');

saveas(hUpSpeed, ...
    fullfile(pathToSaveResults, 'upSpeed_3D.jpg'));
view(2);
saveas(hUpSpeed, ...
    fullfile(pathToSaveResults, 'upSpeed_3D.jpg'));

% Down/up speed by OS.
boolsIsAndroid = cellfun(@(v) strcmp(v(1:3), 'And'), osVersions);
markerForAndroid = ':r';
markerForIos = ':b';

hDownSpeedByOs = figure; hold on;
hMAnd = stem3(downEndLatLons(boolsIsAndroid, 2), ...
    downEndLatLons(boolsIsAndroid, 1), ...
    downSpeedsBps(boolsIsAndroid)./(10^6), markerForAndroid);
hMIos = stem3(downEndLatLons(~boolsIsAndroid, 2), ...
    downEndLatLons(~boolsIsAndroid, 1), ...
    downSpeedsBps(~boolsIsAndroid)./(10^6), markerForIos);
title('Download Speed by Operating System');
zlabel('Data Rate (Mbps)');
xticklabels([]); yticklabels([]); view(3);
legend([hMAnd, hMIos], 'Android', 'iOS', 'Location','best');
plot_google_map('MapType', 'Hybrid');

saveas(hDownSpeedByOs, ...
    fullfile(pathToSaveResults, 'downloadSpeedByOs_3D.jpg'));
view(2); legend([hMAnd, hMIos], 'Android', 'iOS', 'Location','best');
saveas(hDownSpeedByOs, ...
    fullfile(pathToSaveResults, 'downloadSpeedByOs_2D.jpg'));

hUpSpeedByOs = figure; hold on;
hMAnd = stem3(upEndLatLons(boolsIsAndroid, 2), ...
    upEndLatLons(boolsIsAndroid, 1), ...
    upSpeedsBps(boolsIsAndroid)./(10^6), markerForAndroid);
hMIos = stem3(upEndLatLons(~boolsIsAndroid, 2), ...
    upEndLatLons(~boolsIsAndroid, 1), ...
    upSpeedsBps(~boolsIsAndroid)./(10^6), markerForIos);
title('Upload Speed by Operating System');
zlabel('Data Rate (Mbps)');
xticklabels([]); yticklabels([]); view(3);
legend([hMAnd, hMIos], 'Android', 'iOS', 'Location','best');
plot_google_map('MapType', 'Hybrid');

saveas(hUpSpeedByOs, ...
    fullfile(pathToSaveResults, 'uploadSpeedByOs_3D.jpg'));
view(2); legend([hMAnd, hMIos], 'Android', 'iOS', 'Location','best');
saveas(hUpSpeedByOs, ...
    fullfile(pathToSaveResults, 'uploadSpeedByOs_2D.jpg'));

%% Down/up speed by carrier.

boolsIsAtt = cellfun(@(v) strcmp(v(1:3), 'AT&'), carriers);
boolsIsVer = cellfun(@(v) strcmp(v(1:3), 'Ver'), carriers);
boolsIsTM = cellfun(@(v) strcmp(v(1:3), 'T-M'), carriers);
boolsNoSig = cellfun(@(v) strcmp(v(1:3), 'no_'), carriers);
assert(all(boolsIsAtt|boolsIsVer|boolsIsTM|boolsNoSig), ...
    'Unknown carrier label(s)!');

markerForAtt = ':r';
markerForVer = ':b';
markerForTM = ':g';
markerForNoSig = 'xk';

hDownSpeedByCar = figure; hold on;
hMAtt = stem3(downEndLatLons(boolsIsAtt, 2), ...
    downEndLatLons(boolsIsAtt, 1), ...
    downSpeedsBps(boolsIsAtt)./(10^6), markerForAtt);
hMVer = stem3(downEndLatLons(boolsIsVer, 2), ...
    downEndLatLons(boolsIsVer, 1), ...
    downSpeedsBps(boolsIsVer)./(10^6), markerForVer);
hMTM = stem3(downEndLatLons(boolsIsTM, 2), ...
    downEndLatLons(boolsIsTM, 1), ...
    downSpeedsBps(boolsIsTM)./(10^6), markerForTM);
hMNoSig = stem3(downEndLatLons(markerForNoSig, 2), ...
    downEndLatLons(markerForNoSig, 1), ...
    downSpeedsBps(markerForNoSig)./(10^6), markerForNoSig);
title('Download Speed by Carriers');
zlabel('Data Rate (Mbps)');
xticklabels([]); yticklabels([]); view(3);
legend([hMAtt, hMVer, hMTM, hMNoSig], 'AT&T', 'Verizon', 'T-Mobile', ...
    'No Service', 'Location','best');
plot_google_map('MapType', 'Hybrid');

saveas(hDownSpeedByCar, ...
    fullfile(pathToSaveResults, 'downloadSpeedByCar_3D.jpg'));
view(2);
legend([hMAtt, hMVer, hMTM, hMNoSig], 'AT&T', 'Verizon', 'T-Mobile', ...
    'No Service', 'Location','best');
saveas(hDownSpeedByCar, ...
    fullfile(pathToSaveResults, 'downloadSpeedByCar_2D.jpg'));

hUpSpeedByCar = figure; hold on;
hMAtt = stem3(upEndLatLons(boolsIsAtt, 2), ...
    upEndLatLons(boolsIsAtt, 1), ...
    upSpeedsBps(boolsIsAtt)./(10^6), markerForAtt);
hMVer = stem3(upEndLatLons(boolsIsVer, 2), ...
    upEndLatLons(boolsIsVer, 1), ...
    upSpeedsBps(boolsIsVer)./(10^6), markerForVer);
hMTM = stem3(upEndLatLons(boolsIsTM, 2), ...
    upEndLatLons(boolsIsTM, 1), ...
    upSpeedsBps(boolsIsTM)./(10^6), markerForTM);
hMNoSig = stem3(upEndLatLons(markerForNoSig, 2), ...
    upEndLatLons(markerForNoSig, 1), ...
    upSpeedsBps(markerForNoSig)./(10^6), markerForNoSig);
title('Upload Speed by Carriers');
zlabel('Data Rate (Mbps)');
xticklabels([]); yticklabels([]); view(3);
legend([hMAtt, hMVer, hMTM, hMNoSig], 'AT&T', 'Verizon', 'T-Mobile', ...
    'No Service', 'Location','best');
plot_google_map('MapType', 'Hybrid');

saveas(hUpSpeedByCar, ...
    fullfile(pathToSaveResults, 'uploadSpeedByCar_3D.jpg'));
view(2);
legend([hMAtt, hMVer, hMTM, hMNoSig], 'AT&T', 'Verizon', 'T-Mobile', ...
    'No Service', 'Location','best');
saveas(hUpSpeedByCar, ...
    fullfile(pathToSaveResults, 'uploadSpeedByCar_2D.jpg'));

% EOF