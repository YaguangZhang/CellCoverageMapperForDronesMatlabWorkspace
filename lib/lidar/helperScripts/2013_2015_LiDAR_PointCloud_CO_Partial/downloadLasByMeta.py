# Download the CO LiDAR data based on the meta files generated by getFullMeta.
#
# Developed in Python 3.
#
# Yaguang Zhang, 2021/05/12

import pip
import os
import re
from multiprocessing import Pool
import itertools

def safeImport(packageStr):
    try:
        return __import__(packageStr)
    except ImportError:
        pip.main(['install', packageStr])
        return __import__(packageStr)

# We will use wget for the las files via ftp
wget = safeImport('wget')

def main():
    numOfWorkers = 10

    curDirPath = os.path.dirname(os.path.realpath(__file__))
    pathToMetaFiles = os.path.join(curDirPath, '..', 'meta')
    assert os.path.exists(pathToMetaFiles), \
           "Please run getFullMeta.py first to get the meta files!"

    urlToLasZipPrefix = r"ftp://rockyftp.cr.usgs.gov/vdelivery/Datasets/Staged/Elevation/LPC/Projects/USGS_LPC_CO_SoPlatteRiver_Lot2a_2013_LAS_2015/las/tiled/USGS_LPC_CO_SoPlatteRiver_Lot2a_2013_"
    urlToLasZipSuffix = r"_LAS_2015.zip"

    tileNamePre = r"USGS_LPC_CO_SoPlatteRiver_Lot2a_2013_"
    tileNameSur = r"_LAS_2015"

    tileNamePat = tileNamePre+r"([a-z A-Z \d]+)"+tileNameSur
    tileIds = [ re.findall(tileNamePat+r"_meta\.xml", fName)
                for fName in os.listdir(pathToMetaFiles)
                if os.path.isfile(os.path.join(pathToMetaFiles, fName)) ]

    lasZipFtpUrls = [ "" for idx in range(len(tileIds))]
    for idx in range(len(tileIds)):
        assert len(tileIds[idx]) == 1, \
               "One and only one ID expected for each tile!"

        curId = tileIds[idx][0]
        if curId:
            lasZipFtpUrls[idx] = urlToLasZipPrefix + curId + urlToLasZipSuffix

    lasZipFtpUrls = sorted(set(lasZipFtpUrls))
    lasZipFtpFIds = [ re.findall(tileNamePat+r"\.zip", url)[0]
                        for url in lasZipFtpUrls ]
    lasZipFtpFNames = [ tileNamePre+id+tileNameSur+r".zip"
                        for id in lasZipFtpFIds ]

    pathToLasFiles = os.path.join(curDirPath, '..', 'las')
    if not os.path.exists(pathToLasFiles):
        os.makedirs(pathToLasFiles)

    lasZipLocFDirs = [ os.path.join(pathToLasFiles, fName)
                       for fName in lasZipFtpFNames ]

    lasZipFtpUrlsToFetch = [ lasZipFtpUrls[i]
                               for i, d in enumerate(lasZipLocFDirs)
                               if not os.path.isfile(d) ]

    with Pool(numOfWorkers) as p:
        results = p.starmap(downloadLas,
                            zip(lasZipFtpUrlsToFetch,
                            itertools.repeat(pathToLasFiles,
                            len(lasZipFtpUrlsToFetch))))

def downloadLas(url, destDir):
    result = wget.download(url, out=destDir)


if __name__ == '__main__':
    main()